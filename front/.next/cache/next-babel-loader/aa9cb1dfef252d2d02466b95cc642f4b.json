{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reduers/user\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n/* \r\nconst test = logIn({type: 'LOG_IN_REQUEST', data: {id: 'dkstn1230@naver.com'}})\r\ntest.next(); \r\n이렇게 테스트를 하기 편하다 yield를 사용하면\r\n*/\n// 로그인 할때 데이터도 같이 보내줘야 하는데 이럴땐\n// 실행한 함수 안에 logIn함수 action 받아서\n// call, fork 의 차이  fork는비동기, call은 동기 뭐가 다를까 call 를 하면 logInAPI가 리턴 할떄 까지 기다리면서 result 에 넣어주는데\n// fork를 하면 기다리지 않고 그냥 보내버리고 바로 다음께 실행된다!!\n\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data // data: result.data,\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction signUpAPI() {\n  return axios.post(\"/api/signUp\");\n}\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogIn), //call 이랑 다름\n          fork(watchLogOut), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/SuHwan/workspace/reactProject/front/sagas/user.js"],"names":["logIn","logOut","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga","all","fork","put","takeLatest","delay","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","data","axios","post","action","type","error","response","logOutAPI","signUpAPI"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, delay } from \"redux-saga/effects\";\r\nimport {\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS,\r\n    SIGN_UP_REQUEST,\r\n    SIGN_UP_SUCCESS,\r\n    SIGN_UP_FAILURE,\r\n} from \"../reduers/user\";\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post(\"/api/login\", data);\r\n}\r\n\r\n/* \r\nconst test = logIn({type: 'LOG_IN_REQUEST', data: {id: 'dkstn1230@naver.com'}})\r\ntest.next(); \r\n이렇게 테스트를 하기 편하다 yield를 사용하면\r\n*/\r\n\r\n// 로그인 할때 데이터도 같이 보내줘야 하는데 이럴땐\r\n// 실행한 함수 안에 logIn함수 action 받아서\r\n\r\n// call, fork 의 차이  fork는비동기, call은 동기 뭐가 다를까 call 를 하면 logInAPI가 리턴 할떄 까지 기다리면서 result 에 넣어주는데\r\n// fork를 하면 기다리지 않고 그냥 보내버리고 바로 다음께 실행된다!!\r\nfunction* logIn(action) {\r\n    try {\r\n        // 첫번째 자리가 함수고 그 다음부터는 매개변수들\r\n\r\n        // const result = yield call(logInAPI, action.data);\r\n        yield delay(2000);\r\n\r\n        // fork 를 사용하면 axios.post(\"/api/login\");이거나 마찬가지 다\r\n        // call 를 하면 axios.post(\"/api/login\").then(() => {}) 이거랑 비슷하다\r\n        // 정리하면 결과를 받아올떄 까지 기다리느냐 아니면 그냥 바로 넘어가느냐\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data,\r\n            // data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        // const result = yield call(logOutAPI);\r\n        yield delay(2000);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction signUpAPI() {\r\n    return axios.post(\"/api/signUp\");\r\n}\r\n\r\nfunction* signUp() {\r\n    try {\r\n        // const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        \r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn), //call 이랑 다름\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}