{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\SuHwan\\\\workspace\\\\reactProject\\\\front\\\\pages\\\\index.js\";\nimport React, { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { List } from 'react-virtualized';\nimport AppLayout from '../compoments/AppLayout';\nimport PostCard from '../compoments/PostCard';\nimport PostForm from '../compoments/postForm';\nimport { LOAD_POSTS_REQUEST } from '../reduers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(() => {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 500) {\n        if (hasMorePosts && !loadPostsLoading) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading]);\n  const rowRenderer = useCallback(({\n    index,\n    key,\n    style\n  }) => {\n    const todo = useCallback[index];\n    return /*#__PURE__*/_jsxDEV(AppLayout, {\n      todo: todo,\n      style: style\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this);\n  }, [mainPosts]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      className: \"TodoList\",\n      width: 512 // 전체크기\n      ,\n      height: 513 // 전체 높이\n      ,\n      rowCount: mainPosts.length // 항목 개수\n      ,\n      rowHeight: 57,\n      rowRenderer: rowRenderer // 항목을 렌더링할때 쓰는 함수\n      ,\n      list: todos,\n      style: {\n        outline: 'none'\n      } // // List 에 기본 적용되는 outline 스타일 제거\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), mainPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/User/Desktop/SuHwan/workspace/reactProject/front/pages/index.js"],"names":["React","useEffect","useCallback","useDispatch","useSelector","List","AppLayout","PostCard","PostForm","LOAD_POSTS_REQUEST","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","post","type","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","rowRenderer","index","key","style","todo","length","todos","outline","map","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAM;AAAES,IAAAA;AAAF,MAASR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA;AAA3B,MAAgDb,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACK,IAAlB,CAAjE;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEV;AADC,KAAD,CAAR;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMAR,EAAAA,SAAS,CAAC,MAAM;AACd,aAASmB,QAAT,GAAoB;AAClB,UACEC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GACGF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAF7C,EAGE;AACA,YAAIV,YAAY,IAAI,CAACC,gBAArB,EAAuC;AACrCN,UAAAA,QAAQ,CAAC;AACPQ,YAAAA,IAAI,EAAEV;AADC,WAAD,CAAR;AAGD;AACF;AACF;;AACDY,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCP,QAAlC;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCR,QAArC;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAACJ,YAAD,EAAeC,gBAAf,CAjBM,CAAT;AAoBA,QAAMY,WAAW,GAAG3B,WAAW,CAC7B,CAAC;AAAE4B,IAAAA,KAAF;AAASC,IAAAA,GAAT;AAAcC,IAAAA;AAAd,GAAD,KAA2B;AACzB,UAAMC,IAAI,GAAG/B,WAAW,CAAC4B,KAAD,CAAxB;AACA,wBACE,QAAC,SAAD;AACE,MAAA,IAAI,EAAEG,IADR;AAGE,MAAA,KAAK,EAAED;AAHT,OAEOD,GAFP;AAAA;AAAA;AAAA;AAAA,YADF;AAOD,GAV4B,EAW7B,CAAChB,SAAD,CAX6B,CAA/B;AAeA,sBACE,QAAC,SAAD;AAAA,eACGH,EAAE,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YADT,eAEE,QAAC,IAAD;AACE,MAAA,SAAS,EAAC,UADZ;AAEE,MAAA,KAAK,EAAE,GAFT,CAEc;AAFd;AAGE,MAAA,MAAM,EAAE,GAHV,CAGe;AAHf;AAIE,MAAA,QAAQ,EAAEG,SAAS,CAACmB,MAJtB,CAI8B;AAJ9B;AAKE,MAAA,SAAS,EAAE,EALb;AAME,MAAA,WAAW,EAAEL,WANf,CAM4B;AAN5B;AAOE,MAAA,IAAI,EAAEM,KAPR;AAQE,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OART,CAQ8B;;AAR9B;AAAA;AAAA;AAAA;AAAA,YAFF,EAYGrB,SAAS,CAACsB,GAAV,CAAenB,IAAD,iBACb,QAAC,QAAD;AAAwB,MAAA,IAAI,EAAEA;AAA9B,OAAeA,IAAI,CAACoB,EAApB;AAAA;AAAA;AAAA;AAAA,YADD,CAZH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA/DD;;AAiEA,eAAe5B,IAAf","sourcesContent":["import React, { useEffect,useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { List } from 'react-virtualized';\r\nimport AppLayout from '../compoments/AppLayout';\r\nimport PostCard from '../compoments/PostCard';\r\nimport PostForm from '../compoments/postForm';\r\nimport { LOAD_POSTS_REQUEST } from '../reduers/post';\r\n\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      if (\r\n        window.scrollY + document.documentElement.clientHeight\r\n        > (document.documentElement.scrollHeight - 500)\r\n      ) {\r\n        if (hasMorePosts && !loadPostsLoading) {\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [hasMorePosts, loadPostsLoading]);\r\n\r\n\r\n  const rowRenderer = useCallback(\r\n    ({ index, key, style }) => {\r\n      const todo = useCallback[index];\r\n      return (\r\n        <AppLayout\r\n          todo={todo}\r\n          key={key}\r\n          style={style}\r\n        />\r\n      );\r\n    },\r\n    [mainPosts],\r\n  );\r\n\r\n\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      <List\r\n        className=\"TodoList\"\r\n        width={512} // 전체크기\r\n        height={513} // 전체 높이\r\n        rowCount={mainPosts.length} // 항목 개수\r\n        rowHeight={57}\r\n        rowRenderer={rowRenderer} // 항목을 렌더링할때 쓰는 함수\r\n        list={todos}\r\n        style={{ outline: 'none' }} // // List 에 기본 적용되는 outline 스타일 제거\r\n      />\r\n      {mainPosts.map((post) => (\r\n        <PostCard key={post.id} post={post} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}