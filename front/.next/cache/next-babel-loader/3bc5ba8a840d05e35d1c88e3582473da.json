{"ast":null,"code":"import { all, fork, call, takeEvery, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/addpost\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n} // takeEvery 로그인\n// 로그인이 실행 될떄 까지 기다리겠다\n// take로 하면 일회성 이기 때문에  takeEvery 로 하면 진정한 이벤트 리스너 처럼 동작하기 때문에\n// while true 를 사용 하지 않고 동작 가능하다\n\n\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST\", addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), //call 이랑 다름\n  fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/SuHwan/workspace/reactProject/front/sagas/index.js"],"names":["all","fork","call","takeEvery","put","takeLatest","delay","axios","addPostAPI","data","post","addPost","action","result","type","err","response","watchAddPost","rootSaga","watchLogIn","watchLogOut"],"mappings":"AAAA,SACIA,GADJ,EAEIC,IAFJ,EAGIC,IAHJ,EAIIC,SAJJ,EAKIC,GALJ,EAMIC,UANJ,EAOIC,KAPJ,QAQO,oBARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,cAAX,EAA2BD,IAA3B,CAAP;AACH;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMX,IAAI,CAACM,UAAD,EAAaI,MAAM,CAACH,IAApB,CAAzB;AAEA,UAAML,GAAG,CAAC;AACNU,MAAAA,IAAI,EAAE,kBADA;AAENL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOM,GAAP,EAAY;AACV,UAAMX,GAAG,CAAC;AACNU,MAAAA,IAAI,EAAE,kBADA;AAENL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AACJ,C,CAED;AACA;AACA;AACA;;;AAEA,UAAUQ,YAAV,GAAyB;AACrB,QAAMZ,UAAU,CAAC,UAAD,EAAaM,OAAb,CAAhB;AACH;;AAED,eAAe,UAAUO,QAAV,GAAqB;AAChC,QAAMlB,GAAG,CAAC,CACNC,IAAI,CAACkB,UAAD,CADE,EACY;AAClBlB,EAAAA,IAAI,CAACmB,WAAD,CAFE,EAGNnB,IAAI,CAACgB,YAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import {\r\n    all,\r\n    fork,\r\n    call,\r\n    takeEvery,\r\n    put,\r\n    takeLatest,\r\n    delay,\r\n} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post(\"/api/addpost\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n\r\n        yield put({\r\n            type: \"ADD_POST_SUCCESS\",\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: \"ADD_POST_FAILURE\",\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n// takeEvery 로그인\r\n// 로그인이 실행 될떄 까지 기다리겠다\r\n// take로 하면 일회성 이기 때문에  takeEvery 로 하면 진정한 이벤트 리스너 처럼 동작하기 때문에\r\n// while true 를 사용 하지 않고 동작 가능하다\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(\"ADD_POST\", addPost);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fork(watchLogIn), //call 이랑 다름\r\n        fork(watchLogOut),\r\n        fork(watchAddPost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}