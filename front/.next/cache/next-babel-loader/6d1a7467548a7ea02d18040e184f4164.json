{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst intialState = {\n  name: \"안수환\",\n  age: 25,\n  password: \"zz\"\n};\nconst changeNickname = {\n  type: \"CHANGE_NICKNAME\",\n  data: \"안수환환\"\n}; // (이전상태, 액션) => 다음상태\n\nconst rootRedicer = (state = intialState, action) => {\n  switch (action.type) {\n    case \"CHANGE_NICKNAME\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        name: action.data\n      });\n  }\n};\n\nexport default rootRedicer;","map":{"version":3,"sources":["D:/SuHwan/workspace/reactProject/nodeBird/front/reduers/index.js"],"names":["intialState","name","age","password","changeNickname","type","data","rootRedicer","state","action"],"mappings":";;;;;;AAAA,MAAMA,WAAW,GAAG;AAChBC,EAAAA,IAAI,EAAE,KADU;AAEhBC,EAAAA,GAAG,EAAE,EAFW;AAGhBC,EAAAA,QAAQ,EAAE;AAHM,CAApB;AAOA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,IAAI,EAAE,iBADa;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAAvB,C,CAKA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGR,WAAT,EAAsBS,MAAtB,KAAiC;AACjD,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAK,iBAAL;AACI,6CACOG,KADP;AAEIP,QAAAA,IAAI,EAAEQ,MAAM,CAACH;AAFjB;AAFR;AAOH,CARD;;AAUA,eAAeC,WAAf","sourcesContent":["const intialState = {\r\n    name: \"안수환\",\r\n    age: 25,\r\n    password: \"zz\",\r\n};\r\n\r\n\r\nconst changeNickname = {\r\n    type: \"CHANGE_NICKNAME\",\r\n    data: \"안수환환\",\r\n};\r\n\r\n// (이전상태, 액션) => 다음상태\r\nconst rootRedicer = (state = intialState, action) => {\r\n    switch (action.type) {\r\n        case \"CHANGE_NICKNAME\":\r\n            return {\r\n                ...state,\r\n                name: action.data,\r\n            };\r\n    }\r\n};\r\n\r\nexport default rootRedicer;\r\n"]},"metadata":{},"sourceType":"module"}