{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../reduers/post'; // import axios from 'axios';\n\nimport { ADD_POST_TO_ME } from '../reduers/user'; // function addPostAPI(data) {\n//   return axios.post('/api/post', data);\n// }\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          id = shortId.generate();\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n} // function addCommentAPI(data) {\n//   return axios.post(`/api/post/${data.id}/comment`, data);\n// }\n\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          // const result = yield call(addCommentAPI, action.data);\n          console.log(action.data);\n          _context2.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context2.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/SuHwan/workspace/reactProject/front/sagas/post.js"],"names":["addPost","addComment","watchAddPost","watchAddComment","postSaga","all","fork","put","takeLatest","delay","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","action","id","generate","type","data","content","response","console","log"],"mappings":";;oDAiBUA,O;qDA4BAC,U;qDAkBAC,Y;qDAGAC,e;qDAIeC,Q;;AAtEzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,gBANF,QAOO,iBAPP,C,CAQA;;AACA,SAASC,cAAT,QAA+B,iBAA/B,C,CAEA;AACA;AACA;;AAEA,SAAUjB,OAAV,CAAkBkB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMT,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAIUU,UAAAA,EAJV,GAIeT,OAAO,CAACU,QAAR,EAJf;AAAA;AAKI,iBAAMb,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEL,gBADE;AAERM,YAAAA,IAAI,EAAE;AACJH,cAAAA,EAAE,EAAFA,EADI;AAEJI,cAAAA,OAAO,EAAEL,MAAM,CAACI;AAFZ;AAFE,WAAD,CAAT;;AALJ;AAAA;AAYI,iBAAMf,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEJ,cADE;AAERK,YAAAA,IAAI,EAAEH;AAFE,WAAD,CAAT;;AAZJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiBI,iBAAMZ,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEP,gBADE;AAERQ,YAAAA,IAAI,EAAE,YAAIE,QAAJ,CAAaF;AAFX,WAAD,CAAT;;AAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAwBA;AACA;AACA;;;AAEA,SAAUrB,UAAV,CAAqBiB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI;AACAO,UAAAA,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACI,IAAnB;AAHJ;AAII,iBAAMb,KAAK,CAAC,IAAD,CAAX;;AAJJ;AAAA;AAMI,iBAAMF,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAER,mBADE;AAERS,YAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFL,WAAD,CAAT;;AANJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWI,iBAAMf,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEV,mBADE;AAERW,YAAAA,IAAI,EAAE,aAAIE,QAAJ,CAAaF;AAFX,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUpB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACO,gBAAD,EAAmBf,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,UAAU,CAACI,mBAAD,EAAsBX,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACJ,YAAD,CADI,EAERI,IAAI,CAACH,eAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\r\nimport shortId from 'shortid';\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n} from '../reduers/post';\r\n// import axios from 'axios';\r\nimport { ADD_POST_TO_ME } from '../reduers/user';\r\n\r\n// function addPostAPI(data) {\r\n//   return axios.post('/api/post', data);\r\n// }\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function addCommentAPI(data) {\r\n//   return axios.post(`/api/post/${data.id}/comment`, data);\r\n// }\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    console.log(action.data);\r\n    yield delay(1000);\r\n\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost), \r\n    fork(watchAddComment)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}