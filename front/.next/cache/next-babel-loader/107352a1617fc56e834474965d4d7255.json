{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, call, takeEvery, put, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\"; // takeEvery 로그인\n// 로그인이 실행 될떄 까지 기다리겠다\n// take로 하면 일회성 이기 때문에  takeEvery 로 하면 진정한 이벤트 리스너 처럼 동작하기 때문에\n// while true 를 사용 하지 않고 동작 가능하다\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLatest(\"ADD_POST\", addPost);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([fork(watchLogIn), //call 이랑 다름\n          fork(watchLogOut), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/SuHwan/workspace/reactProject/front/sagas/index.js"],"names":["watchAddPost","rootSaga","all","fork","call","takeEvery","put","takeLatest","delay","axios","addPost","watchLogIn","watchLogOut"],"mappings":";;oDAkBUA,Y;qDAIeC,Q;;AAtBzB,SACIC,GADJ,EAEIC,IAFJ,EAGIC,IAHJ,EAIIC,SAJJ,EAKIC,GALJ,EAMIC,UANJ,EAOIC,KAPJ,QAQO,oBARP;AASA,OAAOC,KAAP,MAAkB,OAAlB,C,CAIA;AACA;AACA;AACA;;AAEA,SAAUT,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAAC,UAAD,EAAaG,OAAb,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUT,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACQ,UAAD,CADE,EACY;AAClBR,UAAAA,IAAI,CAACS,WAAD,CAFE,EAGNT,IAAI,CAACH,YAAD,CAHE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\r\n    all,\r\n    fork,\r\n    call,\r\n    takeEvery,\r\n    put,\r\n    takeLatest,\r\n    delay,\r\n} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\n// takeEvery 로그인\r\n// 로그인이 실행 될떄 까지 기다리겠다\r\n// take로 하면 일회성 이기 때문에  takeEvery 로 하면 진정한 이벤트 리스너 처럼 동작하기 때문에\r\n// while true 를 사용 하지 않고 동작 가능하다\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(\"ADD_POST\", addPost);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fork(watchLogIn), //call 이랑 다름\r\n        fork(watchLogOut),\r\n        fork(watchAddPost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}