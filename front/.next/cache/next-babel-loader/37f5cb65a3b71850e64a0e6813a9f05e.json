{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const intialState = {\n  mainPosts: [],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => Array(10).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.imageUrl()\n  }],\n  Comments: [{\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence\n  }]\n}));\nintialState.mainPosts = intialState.mainPosts.concat(generateDummyPost());\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '안수횐'\n  }\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '안수환'\n  },\n  Images: [],\n  Comments: []\n}); //  이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\n// state를 조작하면 안된다 draft만 조작\n\n\nconst reducer = (state = intialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(dummyPost(action.data));\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      {\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n      }\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break; // const postIndex = state.mainPosts.findIndex(\n        //   (v) => v.id === action.data.postId,\n        // );\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/User/Desktop/SuHwan/workspace/reactProject/front/reduers/post.js"],"names":["shortId","produce","faker","intialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","imageUrl","Comments","sentence","concat","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyComment","dummyPost","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const intialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(10).fill().map(() => ({\r\n  id: shortId.generate(),\r\n  User: {\r\n    id: shortId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.imageUrl(),\r\n  }],\r\n  Comments: [{\r\n    id: shortId.generate(),\r\n    User: {\r\n      id: shortId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence,\r\n  }],\r\n}));\r\n\r\nintialState.mainPosts = intialState.mainPosts.concat(\r\n  generateDummyPost(),\r\n);\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '안수횐',\r\n  },\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: '안수환',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n//  이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\n// state를 조작하면 안된다 draft만 조작\r\nconst reducer = (state = intialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.mainPosts.unshift(dummyPost(action.data));\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS: {\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n      break;\r\n    }\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading = false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n      post.Comments.unshift(dummyComment(action.data.content));\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      break;\r\n      // const postIndex = state.mainPosts.findIndex(\r\n      //   (v) => v.id === action.data.postId,\r\n      // );\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}