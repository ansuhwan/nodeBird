{"ast":null,"code":"import { all, call, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_FAILURE, UNFOLLOW_FAILURE, FOLLOW_SUCCESS, FOLLOW_REQUEST, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from '../reduers/user'; // function logInAPI(data) {\n//   return axios.post('/api/login', data);\n// }\n\n/*\r\nconst test = logIn({type: 'LOG_IN_REQUEST', data: {id: 'dkstn1230@naver.com'}})\r\ntest.next();\r\n이렇게 테스트를 하기 편하다 yield를 사용하면\r\n*/\n// 로그인 할때 데이터도 같이 보내줘야 하는데 이럴땐\n// 실행한 함수 안에 logIn함수 action 받아서\n// call, fork 의 차이  fork는비동기, call은 동기 뭐가 다를까 call 를 하면 logInAPI가 리턴 할떄 까지 기다리면서 result 에 넣어주는데\n// fork를 하면 기다리지 않고 그냥 보내버리고 바로 다음께 실행된다!!\n\nfunction* logIn(action) {\n  try {\n    // 첫번째 자리가 함수고 그 다음부터는 매개변수들\n    // const result = yield call(logInAPI, action.data);\n    yield delay(2000); // fork 를 사용하면 axios.post(\"/api/login\");이거나 마찬가지 다\n    // call 를 하면 axios.post(\"/api/login\").then(() => {}) 이거랑 비슷하다\n    // 정리하면 결과를 받아올떄 까지 기다리느냐 아니면 그냥 바로 넘어가느냐\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function logOutAPI() {\n//   return axios.post('/api/logout');\n// }\n\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(2000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('http://localhost:3065/user');\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function signUpAPI() {\n//   return axios.post('/api/signUp');\n// }\n\n\nfunction* follow(action) {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function signUpAPI() {\n//   return axios.post('/api/signUp');\n// }\n\n\nfunction* unFollow(action) {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function signUpAPI() {\n//   return axios.post('/api/signUp');\n// }\n// function* signUp() {\n//   try {\n//     // const result = yield call(logOutAPI);\n//     yield delay(1000);\n//     yield put({\n//       type: SIGN_UP_SUCCESS,\n//     });\n//   } catch (err) {\n//     yield put({\n//       type: SIGN_UP_FAILURE,\n//       error: err.response.data,\n//     });\n//   }\n// }\n\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unFollow);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), // call 이랑 다름\n  fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/SuHwan/workspace/reactProject/front/sagas/user.js"],"names":["all","call","fork","put","takeLatest","delay","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_FAILURE","UNFOLLOW_FAILURE","FOLLOW_SUCCESS","FOLLOW_REQUEST","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","logIn","action","type","data","err","error","response","logOut","signUpAPI","post","signUp","result","console","log","follow","unFollow","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, call, fork, put, takeLatest, delay } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  FOLLOW_FAILURE,\r\n  UNFOLLOW_FAILURE,\r\n  FOLLOW_SUCCESS,\r\n  FOLLOW_REQUEST,\r\n  UNFOLLOW_REQUEST,\r\n  UNFOLLOW_SUCCESS,\r\n} from '../reduers/user';\r\n\r\n// function logInAPI(data) {\r\n//   return axios.post('/api/login', data);\r\n// }\r\n\r\n/*\r\nconst test = logIn({type: 'LOG_IN_REQUEST', data: {id: 'dkstn1230@naver.com'}})\r\ntest.next();\r\n이렇게 테스트를 하기 편하다 yield를 사용하면\r\n*/\r\n\r\n// 로그인 할때 데이터도 같이 보내줘야 하는데 이럴땐\r\n// 실행한 함수 안에 logIn함수 action 받아서\r\n\r\n// call, fork 의 차이  fork는비동기, call은 동기 뭐가 다를까 call 를 하면 logInAPI가 리턴 할떄 까지 기다리면서 result 에 넣어주는데\r\n// fork를 하면 기다리지 않고 그냥 보내버리고 바로 다음께 실행된다!!\r\nfunction* logIn(action) {\r\n  try {\r\n    // 첫번째 자리가 함수고 그 다음부터는 매개변수들\r\n\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(2000);\r\n\r\n    // fork 를 사용하면 axios.post(\"/api/login\");이거나 마찬가지 다\r\n    // call 를 하면 axios.post(\"/api/login\").then(() => {}) 이거랑 비슷하다\r\n    // 정리하면 결과를 받아올떄 까지 기다리느냐 아니면 그냥 바로 넘어가느냐\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n      // data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function logOutAPI() {\r\n//   return axios.post('/api/logout');\r\n// }\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(2000);\r\n\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI() {\r\n  return axios.post('http://localhost:3065/user');\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    console.log(result);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function signUpAPI() {\r\n//   return axios.post('/api/signUp');\r\n// }\r\n\r\nfunction* follow(action) {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function signUpAPI() {\r\n//   return axios.post('/api/signUp');\r\n// }\r\n\r\nfunction* unFollow(action) {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n// function signUpAPI() {\r\n//   return axios.post('/api/signUp');\r\n// }\r\n\r\n// function* signUp() {\r\n//   try {\r\n//     // const result = yield call(logOutAPI);\r\n//     yield delay(1000);\r\n\r\n//     yield put({\r\n//       type: SIGN_UP_SUCCESS,\r\n//     });\r\n//   } catch (err) {\r\n//     yield put({\r\n//       type: SIGN_UP_FAILURE,\r\n//       error: err.response.data,\r\n//     });\r\n//   }\r\n// }\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unFollow);\r\n}\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchFollow), // call 이랑 다름\r\n    fork(watchUnfollow),\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}