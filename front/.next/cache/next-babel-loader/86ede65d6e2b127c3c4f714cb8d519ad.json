{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\SuHwan\\\\workspace\\\\reactProject\\\\front\\\\pages\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // import { AutoSizer, List } from 'react-virtualized'\n\nimport AppLayout from '../compoments/AppLayout';\nimport PostCard from '../compoments/PostCard';\nimport PostForm from '../compoments/postForm';\nimport { LOAD_POSTS_REQUEST } from '../reduers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  const [data, setData] = useState(mockData);\n\n  const scrollListener = params => {\n    if (params.scrollTop + params.clientHeight >= params.scrollHeight - 300) {\n      if (data.length <= 100) {\n        setData([...data, {\n          id: uuidv4(),\n          content: \"추가된 content입니다.\"\n        }, {\n          id: uuidv4(),\n          content: \"추가된 content입니다.\"\n        }, {\n          id: uuidv4(),\n          content: \"추가된 content입니다.\"\n        }, {\n          id: uuidv4(),\n          content: \"추가된 content입니다.\"\n        }]);\n      }\n    }\n  };\n\n  const rowRanderer = ({\n    index,\n    style\n  }) => {\n    const post = data[index];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AutoSizer, {\n    AutoSizer: true,\n    children: ({\n      width\n    }) => /*#__PURE__*/_jsxDEV(List, {\n      rowCount: data.length // 항목의 개수\n      ,\n      height: 400 // 실제 렌더링 되는 높이범위\n      ,\n      rowHeight: 200 // 항목의높이\n      ,\n      width: width // 항목의 너비\n      ,\n      rowRenderer: rowRanderer // 항목렌더링할때쓰는 함수\n      ,\n      onScroll: scrollListener // scroll 함수\n      ,\n      overscanRowCount: 2 // 다음에 로드해올 항목 미리 컨텐츠 높이 잡기\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}; //   useEffect(() => {\n//     function onScroll() {\n//       if (\n//         window.scrollY + document.documentElement.clientHeight\n//         > (document.documentElement.scrollHeight - 500)\n//       ) {\n//         if (hasMorePosts && !loadPostsLoading) {\n//           dispatch({\n//             type: LOAD_POSTS_REQUEST,\n//           });\n//         }\n//       }\n//     }\n//     window.addEventListener('scroll', onScroll);\n//     return () => {\n//       window.removeEventListener('scroll', onScroll);\n//     };\n//   }, [hasMorePosts, loadPostsLoading]);\n//   return (\n//     <AppLayout>\n//       {me && <PostForm />}\n//       {mainPosts.map((post) => (\n//         <PostCard key={post.id} post={post} />\n//       ))}\n//     </AppLayout>\n//   );\n// };\n\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/User/Desktop/SuHwan/workspace/reactProject/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostCard","PostForm","LOAD_POSTS_REQUEST","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","post","type","data","setData","useState","mockData","scrollListener","params","scrollTop","clientHeight","scrollHeight","length","id","uuidv4","content","rowRanderer","index","style","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAASP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA;AAA3B,MAAgDZ,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACK,IAAlB,CAAjE;AACAf,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEV;AADC,KAAD,CAAR;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBC,QAAQ,CAACC,QAAD,CAAhC;;AACA,QAAMC,cAAc,GAAIC,MAAD,IAAY;AACjC,QAAIA,MAAM,CAACC,SAAP,GAAmBD,MAAM,CAACE,YAA1B,IAA0CF,MAAM,CAACG,YAAP,GAAsB,GAApE,EAAyE;AACvE,UAAIR,IAAI,CAACS,MAAL,IAAe,GAAnB,EAAwB;AACtBR,QAAAA,OAAO,CAAC,CACR,GAAGD,IADK,EAER;AACEU,UAAAA,EAAE,EAAEC,MAAM,EADZ;AAEEC,UAAAA,OAAO,EAAE;AAFX,SAFQ,EAMR;AACEF,UAAAA,EAAE,EAAEC,MAAM,EADZ;AAEEC,UAAAA,OAAO,EAAE;AAFX,SANQ,EAUR;AACEF,UAAAA,EAAE,EAAEC,MAAM,EADZ;AAEEC,UAAAA,OAAO,EAAE;AAFX,SAVQ,EAcR;AACEF,UAAAA,EAAE,EAAEC,MAAM,EADZ;AAEEC,UAAAA,OAAO,EAAE;AAFX,SAdQ,CAAD,CAAP;AAkBD;AACF;AACF,GAvBD;;AAyBA,QAAMC,WAAW,GAAG,CAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,KAAsB;AACxC,UAAMjB,IAAI,GAAGE,IAAI,CAACc,KAAD,CAAjB;AACA,wBACE;AAAK,MAAA,KAAK,EAAEC,KAAZ;AAAA,gBACGjB,IAAI,CAACc;AADR;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAPD;;AASA,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,MAApB;AAAA,cACG,CAAC;AAACI,MAAAA;AAAD,KAAD,kBACC,QAAC,IAAD;AACE,MAAA,QAAQ,EAAEhB,IAAI,CAACS,MADjB,CACyB;AADzB;AAEE,MAAA,MAAM,EAAE,GAFV,CAEe;AAFf;AAGE,MAAA,SAAS,EAAE,GAHb,CAGkB;AAHlB;AAIE,MAAA,KAAK,EAAEO,KAJT,CAIgB;AAJhB;AAKE,MAAA,WAAW,EAAEH,WALf,CAK4B;AAL5B;AAME,MAAA,QAAQ,EAAET,cANZ,CAM4B;AAN5B;AAOE,MAAA,gBAAgB,EAAE,CAPpB,CAOuB;;AAPvB;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CA5DD,C,CA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAed,IAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// import { AutoSizer, List } from 'react-virtualized'\r\nimport AppLayout from '../compoments/AppLayout';\r\nimport PostCard from '../compoments/PostCard';\r\nimport PostForm from '../compoments/postForm';\r\nimport { LOAD_POSTS_REQUEST } from '../reduers/post';\r\n\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  const [data, setData] = useState(mockData);\r\n  const scrollListener = (params) => {\r\n    if (params.scrollTop + params.clientHeight >= params.scrollHeight - 300) {\r\n      if (data.length <= 100) {\r\n        setData([\r\n        ...data,\r\n        {\r\n          id: uuidv4(),\r\n          content: \"추가된 content입니다.\"\r\n        },\r\n        {\r\n          id: uuidv4(),\r\n          content: \"추가된 content입니다.\"\r\n        },\r\n        {\r\n          id: uuidv4(),\r\n          content: \"추가된 content입니다.\"\r\n        },\r\n        {\r\n          id: uuidv4(),\r\n          content: \"추가된 content입니다.\"\r\n        }])\r\n      }\r\n    }\r\n  };\r\n\r\n  const rowRanderer = ({ index, style }) => {\r\n    const post = data[index];\r\n    return (\r\n      <div style={style}>\r\n        {post.content}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <AutoSizer AutoSizer> \r\n      {({width}) => (\r\n        <List\r\n          rowCount={data.length} // 항목의 개수\r\n          height={400} // 실제 렌더링 되는 높이범위\r\n          rowHeight={200} // 항목의높이\r\n          width={width} // 항목의 너비\r\n          rowRenderer={rowRanderer} // 항목렌더링할때쓰는 함수\r\n          onScroll={scrollListener} // scroll 함수\r\n          overscanRowCount={2} // 다음에 로드해올 항목 미리 컨텐츠 높이 잡기\r\n        />\r\n      )}\r\n    </AutoSizer>\r\n  )\r\n}\r\n\r\n//   useEffect(() => {\r\n//     function onScroll() {\r\n//       if (\r\n//         window.scrollY + document.documentElement.clientHeight\r\n//         > (document.documentElement.scrollHeight - 500)\r\n//       ) {\r\n//         if (hasMorePosts && !loadPostsLoading) {\r\n//           dispatch({\r\n//             type: LOAD_POSTS_REQUEST,\r\n//           });\r\n//         }\r\n//       }\r\n//     }\r\n//     window.addEventListener('scroll', onScroll);\r\n//     return () => {\r\n//       window.removeEventListener('scroll', onScroll);\r\n//     };\r\n//   }, [hasMorePosts, loadPostsLoading]);\r\n\r\n  \r\n//   return (\r\n//     <AppLayout>\r\n//       {me && <PostForm />}\r\n//       {mainPosts.map((post) => (\r\n//         <PostCard key={post.id} post={post} />\r\n//       ))}\r\n//     </AppLayout>\r\n//   );\r\n// };\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}