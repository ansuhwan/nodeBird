{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, call, takeEvery, put } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n/* \r\nconst test = logIn({type: 'LOG_IN_REQUEST', data: {id: 'dkstn1230@naver.com'}})\r\ntest.next(); \r\n이렇게 테스트를 하기 편하다 yield를 사용하면\r\n*/\n// 로그인 할때 데이터도 같이 보내줘야 하는데 이럴땐\n// 실행한 함수 안에 logIn함수 action 받아서\n// call, fork 의 차이  fork는비동기, call은 동기 뭐가 다를까 call 를 하면 logInAPI가 리턴 할떄 까지 기다리면서 result 에 넣어주는데\n// fork를 하면 기다리지 않고 그냥 보내버리고 바로 다음께 실행된다!!\n\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(logInAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: \"LOG_IN_SUCCESS\",\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: \"LOG_IN_FAILURE\",\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction logOut() {\n  var result;\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: \"LOG_OUT_SUCCESS\",\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: \"LOG_OUT_FAILURE\",\n            data: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/addpost\", data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: \"ADD_POST_SUCCESS\",\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: \"ADD_POST_FAILURE\",\n            data: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n} // takeEvery 로그인\n// 로그인이 실행 될떄 까지 기다리겠다\n// take로 하면 일회성 이기 때문에  takeEvery 로 하면 \n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(\"LOG_IN_REQUEST\", logIn);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(\"LOG_OUT_REQUEST\", logOut);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(\"ADD_POST\", addPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogIn), //call 이랑 다름\n          fork(watchLogOut), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/SuHwan/workspace/reactProject/front/sagas/index.js"],"names":["logIn","logOut","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga","all","fork","call","takeEvery","put","axios","logInAPI","data","post","action","result","type","response","logOutAPI","addPostAPI"],"mappings":"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","sourcesContent":["import { all, fork, call, takeEvery, put } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post(\"/api/login\", data);\r\n}\r\n\r\n/* \r\nconst test = logIn({type: 'LOG_IN_REQUEST', data: {id: 'dkstn1230@naver.com'}})\r\ntest.next(); \r\n이렇게 테스트를 하기 편하다 yield를 사용하면\r\n*/\r\n\r\n// 로그인 할때 데이터도 같이 보내줘야 하는데 이럴땐\r\n// 실행한 함수 안에 logIn함수 action 받아서\r\n\r\n// call, fork 의 차이  fork는비동기, call은 동기 뭐가 다를까 call 를 하면 logInAPI가 리턴 할떄 까지 기다리면서 result 에 넣어주는데\r\n// fork를 하면 기다리지 않고 그냥 보내버리고 바로 다음께 실행된다!!\r\nfunction* logIn(action) {\r\n    try {\r\n        // 첫번째 자리가 함수고 그 다음부터는 매개변수들\r\n        const result = yield call(logInAPI, action.data);\r\n        // fork 를 사용하면 axios.post(\"/api/login\");이거나 마찬가지 다\r\n        // call 를 하면 axios.post(\"/api/login\").then(() => {}) 이거랑 비슷하다\r\n        // 정리하면 결과를 받아올떄 까지 기다리느냐 아니면 그냥 바로 넘어가느냐\r\n        yield put({\r\n            type: \"LOG_IN_SUCCESS\",\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: \"LOG_IN_FAILURE\",\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        const result = yield call(logOutAPI);\r\n\r\n        yield put({\r\n            type: \"LOG_OUT_SUCCESS\",\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: \"LOG_OUT_FAILURE\",\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post(\"/api/addpost\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n\r\n        yield put({\r\n            type: \"ADD_POST_SUCCESS\",\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: \"ADD_POST_FAILURE\",\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n// takeEvery 로그인\r\n// 로그인이 실행 될떄 까지 기다리겠다\r\n// take로 하면 일회성 이기 때문에  takeEvery 로 하면 \r\nfunction* watchLogIn() {\r\n    yield takeEvery(\"LOG_IN_REQUEST\", logIn);\r\n}\r\nfunction* watchLogOut() {\r\n    yield takeEvery(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeEvery(\"ADD_POST\", addPost);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fork(watchLogIn), //call 이랑 다름\r\n        fork(watchLogOut),\r\n        fork(watchAddPost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}