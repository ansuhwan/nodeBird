{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reduers/post'; // import axios from 'axios';\n\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reduers/user'; // function loadPostsAPI(data) {\n//   return axios.get('/api/post', data);\n// }\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} // function addPostAPI(data) {\n//   return axios.post('/api/post', data);\n// }\n\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} // function addCommentAPI(data) {\n//   return axios.post(`/api/post/${data.id}/comment`, data);\n// }\n\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    console.log(action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/SuHwan/workspace/reactProject/front/sagas/post.js"],"names":["all","fork","put","takeLatest","delay","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPosts","action","id","generate","type","data","content","err","response","addPost","removePost","addComment","console","log","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\r\nimport shortId from 'shortid';\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from '../reduers/post';\r\n// import axios from 'axios';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reduers/user';\r\n\r\n// function loadPostsAPI(data) {\r\n//   return axios.get('/api/post', data);\r\n// }\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function addPostAPI(data) {\r\n//   return axios.post('/api/post', data);\r\n// }\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function addCommentAPI(data) {\r\n//   return axios.post(`/api/post/${data.id}/comment`, data);\r\n// }\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    console.log(action.data);\r\n    yield delay(1000);\r\n\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}