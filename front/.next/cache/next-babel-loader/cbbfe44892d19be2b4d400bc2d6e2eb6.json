{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\SuHwan\\\\workspace\\\\reactProject\\\\front\\\\pages\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { List } from 'react-virtualized';\nimport AppLayout from '../compoments/AppLayout';\nimport PostCard from '../compoments/PostCard';\nimport PostForm from '../compoments/postForm';\nimport { LOAD_POSTS_REQUEST } from '../reduers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Home = function Home() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostsLoading = _useSelector2.loadPostsLoading;\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(function () {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 500) {\n        if (hasMorePosts && !loadPostsLoading) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading]);\n  var rowRenderer = useCallback(function (_ref) {\n    var index = _ref.index,\n        key = _ref.key,\n        style = _ref.style;\n    var todo = useCallback[index];\n    return /*#__PURE__*/_jsxDEV(AppLayout, {\n      todo: todo,\n      style: style\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, _this);\n  }, [todos]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 14\n    }, _this), /*#__PURE__*/_jsxDEV(List, {\n      className: \"TodoList\",\n      width: 512 // 전체크기\n      ,\n      height: 513 // 전체 높이\n      ,\n      rowCount: todos.length // 항목 개수\n      ,\n      rowHeight: 57,\n      rowRenderer: rowRenderer // 항목을 렌더링할때 쓰는 함수\n      ,\n      list: todos,\n      style: {\n        outline: 'none'\n      } // // List 에 기본 적용되는 outline 스타일 제거\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, _this), mainPosts.map(function (post) {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: post\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Home, \"Wh952OtD7iD9HfaRS+4BY23PC5g=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/User/Desktop/SuHwan/workspace/reactProject/front/pages/index.js"],"names":["React","useEffect","useCallback","useDispatch","useSelector","List","AppLayout","PostCard","PostForm","LOAD_POSTS_REQUEST","Home","dispatch","state","user","me","post","mainPosts","hasMorePosts","loadPostsLoading","type","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","rowRenderer","index","key","style","todo","todos","length","outline","map","id"],"mappings":"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","sourcesContent":["import React, { useEffect,useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { List } from 'react-virtualized';\r\nimport AppLayout from '../compoments/AppLayout';\r\nimport PostCard from '../compoments/PostCard';\r\nimport PostForm from '../compoments/postForm';\r\nimport { LOAD_POSTS_REQUEST } from '../reduers/post';\r\n\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      if (\r\n        window.scrollY + document.documentElement.clientHeight\r\n        > (document.documentElement.scrollHeight - 500)\r\n      ) {\r\n        if (hasMorePosts && !loadPostsLoading) {\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [hasMorePosts, loadPostsLoading]);\r\n\r\n\r\n  const rowRenderer = useCallback(\r\n    ({ index, key, style }) => {\r\n      const todo = useCallback[index];\r\n      return (\r\n        <AppLayout\r\n          todo={todo}\r\n          key={key}\r\n          style={style}\r\n        />\r\n      );\r\n    },\r\n    [todos],\r\n  );\r\n\r\n\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      <List\r\n        className=\"TodoList\"\r\n        width={512} // 전체크기\r\n        height={513} // 전체 높이\r\n        rowCount={todos.length} // 항목 개수\r\n        rowHeight={57}\r\n        rowRenderer={rowRenderer} // 항목을 렌더링할때 쓰는 함수\r\n        list={todos}\r\n        style={{ outline: 'none' }} // // List 에 기본 적용되는 outline 스타일 제거\r\n      />\r\n      {mainPosts.map((post) => (\r\n        <PostCard key={post.id} post={post} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}