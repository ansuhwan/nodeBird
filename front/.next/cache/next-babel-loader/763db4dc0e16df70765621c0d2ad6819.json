{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport user from './';\nconst intialState = {\n  user: {},\n  post: {}\n}; // 비동기 액션 만들기\n// 액션 만들기\n\nconst changeNickname = data => {\n  return {\n    type: \"CHANGE_NICKNAME\",\n    data\n  };\n};\n\nchangeNickname(\"에베베\"); // (이전상태, 액션) => 다음상태\n\nconst rootRedicer = (state = intialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log(\"HYDRATE\", action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default rootRedicer;","map":{"version":3,"sources":["C:/Users/User/Desktop/SuHwan/workspace/reactProject/front/reduers/index.js"],"names":["HYDRATE","user","intialState","post","changeNickname","data","type","rootRedicer","state","action","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,OAAOC,IAAP,MAAiB,IAAjB;AAKA,MAAMC,WAAW,GAAG;AAChBD,EAAAA,IAAI,EAAE,EADU;AAGhBE,EAAAA,IAAI,EAAE;AAHU,CAApB,C,CAOA;AAEA;;AACA,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAC7B,SAAO;AACHC,IAAAA,IAAI,EAAE,iBADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALD;;AAOAD,cAAc,CAAC,KAAD,CAAd,C,CAEA;;AACA,MAAMG,WAAW,GAAG,CAACC,KAAK,GAAGN,WAAT,EAAsBO,MAAtB,KAAiC;AACjD,UAAQA,MAAM,CAACH,IAAf;AACI,SAAKN,OAAL;AACIU,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;AACA,6CAAYD,KAAZ,GAAsBC,MAAM,CAACG,OAA7B;;AACJ;AACI,aAAOJ,KAAP;AALR;AAOH,CARD;;AAUA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\n\r\nimport user from './'\r\n\r\n\r\n\r\n\r\nconst intialState = {\r\n    user: {\r\n    },\r\n    post: {\r\n    },\r\n};\r\n\r\n// 비동기 액션 만들기\r\n\r\n// 액션 만들기\r\nconst changeNickname = (data) => {\r\n    return {\r\n        type: \"CHANGE_NICKNAME\",\r\n        data,\r\n    };\r\n};\r\n\r\nchangeNickname(\"에베베\");\r\n\r\n// (이전상태, 액션) => 다음상태\r\nconst rootRedicer = (state = intialState, action) => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            console.log(\"HYDRATE\", action);\r\n            return { ...state, ...action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default rootRedicer;\r\n"]},"metadata":{},"sourceType":"module"}