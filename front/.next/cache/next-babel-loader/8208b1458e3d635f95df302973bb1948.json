{"ast":null,"code":"import { all, fork, call, takeEvery, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n/* \r\nconst test = logIn({type: 'LOG_IN_REQUEST', data: {id: 'dkstn1230@naver.com'}})\r\ntest.next(); \r\n이렇게 테스트를 하기 편하다 yield를 사용하면\r\n*/\n// 로그인 할때 데이터도 같이 보내줘야 하는데 이럴땐\n// 실행한 함수 안에 logIn함수 action 받아서\n// call, fork 의 차이  fork는비동기, call은 동기 뭐가 다를까 call 를 하면 logInAPI가 리턴 할떄 까지 기다리면서 result 에 넣어주는데\n// fork를 하면 기다리지 않고 그냥 보내버리고 바로 다음께 실행된다!!\n\n\nfunction* logIn(action) {\n  try {\n    // 첫번째 자리가 함수고 그 다음부터는 매개변수들\n    const result = yield call(logInAPI, action.data); // fork 를 사용하면 axios.post(\"/api/login\");이거나 마찬가지 다\n    // call 를 하면 axios.post(\"/api/login\").then(() => {}) 이거랑 비슷하다\n    // 정리하면 결과를 받아올떄 까지 기다리느냐 아니면 그냥 바로 넘어가느냐\n\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/addpost\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n} // takeEvery 로그인\n// 로그인이 실행 될떄 까지 기다리겠다\n// take로 하면 일회성 이기 때문에  takeEvery 로 하면 진정한 이벤트 리스너 처럼 동작하기 때문에 \n// while true 를 사용 하지 않고 동작 가능하다\n\n\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(\"LOG_OUT_REQUEST\", logOut);\n}\n\nfunction* watchAddPost() {\n  yield takeEvery(\"ADD_POST\", addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogIn), //call 이랑 다름\n  fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/SuHwan/workspace/reactProject/front/sagas/index.js"],"names":["all","fork","call","takeEvery","put","takeLatest","axios","logInAPI","data","post","logIn","action","result","type","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,SAA1B,EAAqCC,GAArC,EAA0CC,UAA1C,QAA4D,oBAA5D;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;AACA,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA;AACA,UAAMC,MAAM,GAAG,MAAMV,IAAI,CAACK,QAAD,EAAWI,MAAM,CAACH,IAAlB,CAAzB,CAFA,CAGA;AACA;AACA;;AACA,UAAMJ,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,gBADA;AAENL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAVD,CAUE,OAAOM,GAAP,EAAY;AACV,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,gBADA;AAENL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASQ,SAAT,GAAqB;AACjB,SAAOV,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUQ,MAAV,GAAmB;AACf,MAAI;AACA,UAAML,MAAM,GAAG,MAAMV,IAAI,CAACc,SAAD,CAAzB;AAEA,UAAMZ,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,iBADA;AAENL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOM,GAAP,EAAY;AACV,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,iBADA;AAENL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASU,UAAT,CAAoBV,IAApB,EAA0B;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,cAAX,EAA2BD,IAA3B,CAAP;AACH;;AAED,UAAUW,OAAV,CAAkBR,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMV,IAAI,CAACgB,UAAD,EAAaP,MAAM,CAACH,IAApB,CAAzB;AAEA,UAAMJ,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,kBADA;AAENL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOM,GAAP,EAAY;AACV,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,kBADA;AAENL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AACJ,C,CAED;AACA;AACA;AACA;;;AAEA,UAAUY,UAAV,GAAuB;AACnB,QAAMf,UAAU,CAAC,gBAAD,EAAmBK,KAAnB,CAAhB;AACH;;AACD,UAAUW,WAAV,GAAwB;AACpB,QAAMlB,SAAS,CAAC,iBAAD,EAAoBc,MAApB,CAAf;AACH;;AACD,UAAUK,YAAV,GAAyB;AACrB,QAAMnB,SAAS,CAAC,UAAD,EAAagB,OAAb,CAAf;AACH;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAMvB,GAAG,CAAC,CACNC,IAAI,CAACmB,UAAD,CADE,EACY;AAClBnB,EAAAA,IAAI,CAACoB,WAAD,CAFE,EAGNpB,IAAI,CAACqB,YAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, call, takeEvery, put, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post(\"/api/login\", data);\r\n}\r\n\r\n/* \r\nconst test = logIn({type: 'LOG_IN_REQUEST', data: {id: 'dkstn1230@naver.com'}})\r\ntest.next(); \r\n이렇게 테스트를 하기 편하다 yield를 사용하면\r\n*/\r\n\r\n// 로그인 할때 데이터도 같이 보내줘야 하는데 이럴땐\r\n// 실행한 함수 안에 logIn함수 action 받아서\r\n\r\n// call, fork 의 차이  fork는비동기, call은 동기 뭐가 다를까 call 를 하면 logInAPI가 리턴 할떄 까지 기다리면서 result 에 넣어주는데\r\n// fork를 하면 기다리지 않고 그냥 보내버리고 바로 다음께 실행된다!!\r\nfunction* logIn(action) {\r\n    try {\r\n        // 첫번째 자리가 함수고 그 다음부터는 매개변수들\r\n        const result = yield call(logInAPI, action.data);\r\n        // fork 를 사용하면 axios.post(\"/api/login\");이거나 마찬가지 다\r\n        // call 를 하면 axios.post(\"/api/login\").then(() => {}) 이거랑 비슷하다\r\n        // 정리하면 결과를 받아올떄 까지 기다리느냐 아니면 그냥 바로 넘어가느냐\r\n        yield put({\r\n            type: \"LOG_IN_SUCCESS\",\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: \"LOG_IN_FAILURE\",\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n        const result = yield call(logOutAPI);\r\n\r\n        yield put({\r\n            type: \"LOG_OUT_SUCCESS\",\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: \"LOG_OUT_FAILURE\",\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post(\"/api/addpost\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n\r\n        yield put({\r\n            type: \"ADD_POST_SUCCESS\",\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: \"ADD_POST_FAILURE\",\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n// takeEvery 로그인\r\n// 로그인이 실행 될떄 까지 기다리겠다\r\n// take로 하면 일회성 이기 때문에  takeEvery 로 하면 진정한 이벤트 리스너 처럼 동작하기 때문에 \r\n// while true 를 사용 하지 않고 동작 가능하다\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest(\"LOG_IN_REQUEST\", logIn);\r\n}\r\nfunction* watchLogOut() {\r\n    yield takeEvery(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeEvery(\"ADD_POST\", addPost);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fork(watchLogIn), //call 이랑 다름\r\n        fork(watchLogOut),\r\n        fork(watchAddPost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}